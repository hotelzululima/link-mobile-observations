# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
play.modules.enabled += "modules.AwsClientsModule"
play.modules.enabled += "modules.KinesisModule"
play.modules.enabled += "play.modules.swagger.SwaggerModule"
play.modules.disabled += "play.core.ObjectMapperModule"
play.filters.enabled += "play.filters.cors.CORSFilter"

play.http.secret.key = "QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241AB`R5W:1uDFN];Ik@n"

play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
    allowed = ["."]
  }
}
environment = "local"
environment = ${?ENVIRONMENT_NAME}
salt.password = "Hola"
salt.password = ${?SALT_PASSWORD}
retries = 5
retries = ${?APP_RETRIES}
retry.policy = [0m, 1m, 1m, 2m, 3m, 5m, 8m]

healthresponse = "This application is basically functional."


oidc {
  discoveryUri = ""
  clientId = ""
  clientSecret = ""
}

gulp.devDirs = ["ui/app/dist"]

akka {

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    default-mailbox.stash-capacity = 10000
    //    serialize-messages = on

    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551 # 0 means any free port
      port = ${?AKKA_PORT}
    }
  }

  cluster {
    #  To add the seeds when starting the app
    #  -Dakka.cluster.seed-nodes.1="akka.tcp://application@127.0.0.1:2551"
    #  -Dakka.cluster.seed-nodes.2="akka.tcp://application@127.0.0.1:2552"
    seed-nodes = ["akka.tcp://application@127.0.0.1:2551"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    # auto-down-unreachable-after = 10s
  }

  loglevel = "INFO"
}

# Disable legacy metrics in akka-cluster.
akka.cluster.metrics.enabled = off

# Enable metrics extension in akka-cluster-metrics.
#akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder = ${user.dir}/target/native